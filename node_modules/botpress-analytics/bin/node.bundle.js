module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Users/slvn/Desktop/botpress-analytics";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	var checkVersion = __webpack_require__(2);
	
	var Analytics = __webpack_require__(3);
	var CustomAnalytics = __webpack_require__(12);
	var DB = __webpack_require__(13);
	var _ = __webpack_require__(7);
	
	var analytics = null;
	var db = null;
	
	var interactionsToTrack = ['message', 'text', 'button', 'template', 'quick_reply', 'postback'];
	
	var incomingMiddleware = function incomingMiddleware(event, next) {
	  if (!_.includes(interactionsToTrack, event.type)) {
	    return next();
	  }
	
	  if (event.user) {
	    // Asynchronously save the interaction (non-blocking)
	    db && db.saveIncoming(event).then().catch(function () {
	      event.bp && event.bp.logger.debug('[Analytics] Could not save incoming interaction for ' + event.platform);
	    });
	  }
	
	  next();
	};
	
	var outgoingMiddleware = function outgoingMiddleware(event, next) {
	  if (!_.includes(interactionsToTrack, event.type)) {
	    return next();
	  }
	
	  // Asynchronously save the interaction (non-blocking)
	  db && db.saveOutgoing(event).then().catch(function () {
	    event.bp && event.bp.logger.debug('[Analytics] Could not save outgoing interaction for ' + event.platform);
	  });
	
	  next();
	};
	
	module.exports = {
	  init: function init(bp) {
	    checkVersion(bp, __dirname);
	
	    bp.middlewares.register({
	      name: 'analytics.incoming',
	      module: 'botpress-analytics',
	      type: 'incoming',
	      handler: incomingMiddleware,
	      order: 5,
	      description: 'Tracks incoming messages for Analytics purposes'
	    });
	
	    bp.middlewares.register({
	      name: 'analytics.outgoing',
	      module: 'botpress-analytics',
	      type: 'outgoing',
	      handler: outgoingMiddleware,
	      description: 'Tracks outgoing messages for Analytics purposes'
	    });
	
	    bp.analytics = {
	      custom: CustomAnalytics({ bp: bp })
	    };
	
	    bp.db.get().then(function (knex) {
	      db = DB(knex, bp);
	      return db.initializeDb().then(function () {
	        return analytics = new Analytics(bp, knex);
	      });
	    });
	  },
	
	  ready: function ready(bp) {
	    var _this = this;
	
	    bp.getRouter("botpress-analytics").get("/graphs", function (req, res, next) {
	      res.send(analytics.getChartsGraphData());
	    });
	
	    bp.getRouter('botpress-analytics').get('/metadata', function (req, res, next) {
	      analytics.getAnalyticsMetadata().then(function (metadata) {
	        return res.send(metadata);
	      });
	    });
	
	    bp.getRouter('botpress-analytics').get('/custom_metrics', function () {
	      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(req, res, next) {
	        var metrics;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return bp.analytics.custom.getAll(req.query.from, req.query.to);
	
	              case 2:
	                metrics = _context.sent;
	
	                res.send(metrics);
	
	              case 4:
	              case 'end':
	                return _context.stop();
	            }
	          }
	        }, _callee, _this);
	      }));
	
	      return function (_x, _x2, _x3) {
	        return _ref.apply(this, arguments);
	      };
	    }());
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("botpress-version-manager");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var fs = __webpack_require__(4);
	var path = __webpack_require__(5);
	var EventEmitter = __webpack_require__(6);
	var _ = __webpack_require__(7);
	var moment = __webpack_require__(8);
	
	var Stats = __webpack_require__(9);
	
	var createEmptyFileIfDoesntExist = function createEmptyFileIfDoesntExist(file) {
	  if (!fs.existsSync(file)) {
	    fs.writeFileSync(file, '{}');
	  }
	};
	
	var loadDataFromFile = function loadDataFromFile(file) {
	  if (!fs.existsSync(file)) {
	    console.log("Analytics file (" + file + ") doesn\'t exist.");
	  }
	  return JSON.parse(fs.readFileSync(file, "utf-8"));
	};
	
	var Analytics = function () {
	  function Analytics(bp, knex) {
	    var _this = this;
	
	    _classCallCheck(this, Analytics);
	
	    if (!bp) {
	      throw new Error('You need to specify botpress');
	    }
	
	    this.bp = bp;
	    this.knex = knex;
	    this.stats = Stats(knex);
	    this.chartsDatafile = path.join(bp.projectLocation, bp.botfile.dataDir, 'botpress-analytics.charts.json');
	
	    createEmptyFileIfDoesntExist(this.chartsDatafile);
	
	    var running = false;
	    setInterval(function () {
	      _this.stats.getLastRun().then(function (ts) {
	        var elasped = moment.duration(moment().diff(ts)).asMinutes();
	        if (!ts || elasped >= _this.getUpdateFrequency()) {
	          _this.updateData();
	        }
	      });
	    }, 5000);
	  }
	
	  _createClass(Analytics, [{
	    key: 'getDBSize',
	    value: function getDBSize() {
	      if (this.bp.db.location !== 'postgres') {
	        return fs.statSync(this.bp.db.location)['size'] / 1000000.0; // in megabytes  
	      } else {
	        return 1;
	      }
	    }
	  }, {
	    key: 'getAnalyticsMetadata',
	    value: function getAnalyticsMetadata() {
	      var _this2 = this;
	
	      return this.stats.getLastRun().then(function (ts) {
	        var run = moment(new Date(ts));
	        var then = moment(new Date()).subtract(30, 'min');
	        var elasped = moment.duration(then.diff(run)).humanize();
	        return { lastUpdated: elasped, size: _this2.getDBSize() };
	      });
	    }
	  }, {
	    key: 'getUpdateFrequency',
	    value: function getUpdateFrequency() {
	      return this.getDBSize() < 5 ? 5 : 60;
	    }
	  }, {
	    key: 'updateData',
	    value: function updateData() {
	      var _this3 = this;
	
	      if (this.running) return;
	      this.running = true;
	      this.bp.logger.debug('botpress-analytics: recompiling analytics');
	      this.stats.getTotalUsers().then(function (data) {
	        return _this3.savePartialData('totalUsers', data);
	      }).then(function () {
	        return _this3.stats.getDailyActiveUsers();
	      }).then(function (data) {
	        return _this3.savePartialData('activeUsers', data);
	      }).then(function () {
	        return _this3.stats.getDailyGender();
	      }).then(function (data) {
	        return _this3.savePartialData('genderUsage', data);
	      }).then(function () {
	        return _this3.stats.getInteractionRanges();
	      }).then(function (data) {
	        return _this3.savePartialData('interactionsRange', data);
	      }).then(function () {
	        return _this3.stats.getAverageInteractions();
	      }).then(function (averageInteractions) {
	        _this3.stats.getNumberOfUsers().then(function (nbUsers) {
	          _this3.savePartialData('fictiveSpecificMetrics', {
	            numberOfInteractionInAverage: averageInteractions,
	            numberOfUsersToday: nbUsers.today,
	            numberOfUsersYesterday: nbUsers.yesterday,
	            numberOfUsersThisWeek: nbUsers.week
	          });
	        });
	      }).then(function () {
	        return _this3.stats.usersRetention();
	      }).then(function (data) {
	        return _this3.savePartialData('retentionHeatMap', data);
	      }).then(function () {
	        return _this3.stats.getBusyHours();
	      }).then(function (data) {
	        return _this3.savePartialData('busyHoursHeatMap', data);
	      }).then(function () {
	        var data = _this3.getChartsGraphData();
	        _this3.bp.events.emit('data.send', data);
	        _this3.stats.setLastRun();
	      }).then(function () {
	        return _this3.running = false;
	      });
	    }
	  }, {
	    key: 'savePartialData',
	    value: function savePartialData(property, data) {
	      var chartsData = loadDataFromFile(this.chartsDatafile);
	      chartsData[property] = data;
	      fs.writeFileSync(this.chartsDatafile, JSON.stringify(chartsData));
	    }
	  }, {
	    key: 'getChartsGraphData',
	    value: function getChartsGraphData() {
	
	      var chartsData = loadDataFromFile(this.chartsDatafile);
	
	      if (_.isEmpty(chartsData)) {
	        return { loading: true, noData: true };
	      }
	
	      return {
	        loading: false,
	        noData: false,
	        totalUsersChartData: chartsData.totalUsers || [],
	        activeUsersChartData: chartsData.activeUsers || [],
	        genderUsageChartData: chartsData.genderUsage || [],
	        typicalConversationLengthInADay: chartsData.interactionsRange || [],
	        specificMetricsForLastDays: chartsData.fictiveSpecificMetrics || {},
	        retentionHeatMap: chartsData.retentionHeatMap || [],
	        busyHoursHeatMap: chartsData.busyHoursHeatMap || []
	      };
	    }
	  }]);
	
	  return Analytics;
	}();
	
	module.exports = Analytics;

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("eventemitter2");

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("moment");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _moment = __webpack_require__(8);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _bluebird = __webpack_require__(10);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	var _lodash = __webpack_require__(7);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _botpress = __webpack_require__(11);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var oneDayMs = 1000 * 60 * 60 * 24;
	
	var knex = null;
	
	function rangeDates() {
	  return knex('users').select(knex.raw('max(created_on) as max, min(created_on) as min')).then().get(0).then(function (result) {
	    if (!result.min || !result.max) {
	      return null;
	    }
	
	    var range = (0, _moment2.default)(result.max).diff((0, _moment2.default)(result.min), 'days');
	    var ranges = [];
	    for (var i = 1; i <= 10; i++) {
	      ranges.push(parseInt(result.min + range / 10 * i));
	    }
	    var ret = {
	      min: result.min,
	      max: result.max,
	      format: null,
	      ranges: ranges
	    };
	    if (range < 360) {
	      ret.format = function (date) {
	        return (0, _moment2.default)(date).format('MMM Do');
	      };
	    } else {
	      // > 1year period
	      ret.format = function (date) {
	        return (0, _moment2.default)(date).format('MMM YY');
	      };
	    }
	
	    return ret;
	  });
	}
	
	function getTotalUsers() {
	  return rangeDates().then(function (dates) {
	    if (!dates) return;
	    return knex('users').select(knex.raw('distinct platform')).then(function (platforms) {
	
	      var statsBase = platforms.reduce(function (acc, curr) {
	        acc[curr.platform] = 0;
	        return acc;
	      }, { total: 0 });
	
	      return knex('users').select(knex.raw('count(*) as count, max(created_on) as date, max(platform) as platform')).groupBy(knex.raw("date(created_on), platform")).orderBy(knex.raw('date(created_on)')).then(function (rows) {
	        var total = 0;
	        var totalPlatform = {};
	        var result = {};
	        var min = dates.format((0, _moment2.default)(new Date(dates.min)).subtract(1, 'day'));
	        result[min] = Object.assign({}, statsBase);
	        rows.map(function (row) {
	          var date = dates.format(row.date);
	          if (!result[date]) {
	            result[date] = Object.assign({}, statsBase);
	          }
	          if (!totalPlatform[row.platform]) {
	            totalPlatform[row.platform] = 0;
	          }
	          var count = parseInt(row.count);
	          totalPlatform[row.platform] += count;
	          result[date].total = total += count;
	          result[date][row.platform] = totalPlatform[row.platform];
	        });
	        var max = dates.format((0, _moment2.default)(new Date(dates.max)).add(1, 'hour'));
	        result[max] = Object.assign({}, statsBase, { total: total }, totalPlatform);
	        return _lodash2.default.toPairs(result).map(function (_ref) {
	          var _ref2 = _slicedToArray(_ref, 2),
	              k = _ref2[0],
	              v = _ref2[1];
	
	          v.name = k;
	          return v;
	        });
	      });
	    });
	  });
	}
	
	function getLastDaysRange(nb) {
	  var nbOfDays = nb || 14;
	
	  var ranges = _lodash2.default.times(nbOfDays, Number);
	  return ranges.map(function (n) {
	    var date = (0, _moment2.default)(new Date()).subtract(n, 'days');
	    return {
	      date: date.format('MMM Do'),
	      start: date.startOf('day').toDate(),
	      end: date.endOf('day').toDate(),
	      day: date.format('l')
	    };
	  });
	}
	
	function getDailyActiveUsers() {
	  var ranges = _lodash2.default.reverse(getLastDaysRange());
	  return _bluebird2.default.mapSeries(ranges, function (range) {
	    return knex('analytics_interactions').select(knex.raw('count(*) as count, platform')).join('users', 'users.id', 'analytics_interactions.user').where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('ts', range.start, range.end)).andWhere('direction', '=', 'in').groupBy(['user', 'platform']).then(function (results) {
	      return results.reduce(function (acc, curr) {
	        var count = parseInt(curr.count);
	        acc.total += count;
	        acc[curr.platform] = count;
	        return acc;
	      }, { total: 0, name: range.date });
	    });
	  });
	}
	
	function getDailyGender() {
	  var ranges = _lodash2.default.reverse(getLastDaysRange());
	  return _bluebird2.default.mapSeries(ranges, function (range) {
	    return knex('analytics_interactions').select(knex.raw('count(*) as count, gender')).join('users', 'users.id', 'analytics_interactions.user').where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('ts', range.start, range.end)).andWhere('direction', '=', 'in').groupBy(['user', 'gender']).then(function (results) {
	      return results.reduce(function (acc, curr) {
	        var count = parseInt(curr.count);
	        acc.total += count;
	        acc[curr.gender] = count;
	        return acc;
	      }, { total: 0, name: range.date });
	    });
	  });
	}
	
	function getInteractionRanges() {
	  var ranges = getLastDaysRange();
	  return _bluebird2.default.mapSeries(ranges, function (range) {
	
	    var inner = knex.from('analytics_interactions').where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('ts', range.start, range.end)).andWhere('direction', '=', 'in').groupBy('user').select(knex.raw('count(*) as c')).toString();
	
	    return knex.raw('select\n      sum(r1) as s1,\n      sum(r2) as s2,\n      sum(r3) as s3,\n      sum(r4) as s4,\n      sum(r5) as s5,\n      sum(r6) as s6,\n      sum(r7) as s7,\n      sum(r8) as s8\n    from (select \n      (select count(*) as count where c between 0 and 1) as r1,\n      (select count(*) where c between 2 and 3) as r2,\n      (select count(*) where c between 4 and 5) as r3,\n      (select count(*) where c between 6 and 9) as r4,\n      (select count(*) where c between 10 and 14) as r5,\n      (select count(*) where c between 15 and 29) as r6,\n      (select count(*) where c between 30 and 50) as r7,\n      (select count(*) where c > 50) as r8\n        from (' + inner + ') as q1 ) as q2');
	  }).then(function (rows) {
	    if (rows[0].rows) {
	      return rows.map(function (r) {
	        return r.rows[0];
	      });
	    } else {
	      return rows.map(function (r) {
	        return r[0];
	      });
	    }
	  }).then(function (results) {
	    return results.reduce(function (acc, curr) {
	      return _lodash2.default.mapValues(acc, function (a, k) {
	        return a + (parseInt(curr[k]) || 0);
	      });
	    }, { s1: 0, s2: 0, s3: 0, s4: 0, s5: 0, s6: 0, s7: 0, s8: 0 });
	  }).then(function (results) {
	    return [{ name: '[0-2]', count: results.s1 }, { name: '[2-4]', count: results.s2 }, { name: '[4-6]', count: results.s3 }, { name: '[6-10]', count: results.s4 }, { name: '[10-15]', count: results.s5 }, { name: '[15-30]', count: results.s6 }, { name: '[30-50]', count: results.s7 }, { name: '50+', count: results.s8 }];
	  });
	}
	
	function getAverageInteractions() {
	  // Average incoming interactions per user per day for the last 7 days
	  var lastWeek = (0, _moment2.default)(new Date()).subtract(7, 'days').toDate();
	  var now = (0, _botpress.DatabaseHelpers)(knex).date.now();
	
	  return knex.select(knex.raw('avg(c) as count')).from(function () {
	    return this.from('analytics_interactions').where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('ts', lastWeek, now)).andWhere('direction', '=', 'in').groupBy(knex.raw("user, date(ts)")).select(knex.raw('count(*) as c')).as('q1');
	  }).then().get(0).then(function (result) {
	    return parseFloat(result.count) || 0.0;
	  });
	}
	
	function getNumberOfUsers() {
	  // Get total number of active users for today, yesterday, this week
	
	  var ranges = [{
	    label: 'today',
	    start: (0, _moment2.default)(new Date()).startOf('day').toDate(),
	    end: new Date()
	  }, {
	    label: 'yesterday',
	    start: (0, _moment2.default)(new Date()).subtract(1, 'days').startOf('day').toDate(),
	    end: (0, _moment2.default)(new Date()).subtract(1, 'days').endOf('day').toDate()
	  }, {
	    label: 'week',
	    start: (0, _moment2.default)(new Date()).startOf('week').toDate(),
	    end: (0, _moment2.default)(new Date()).endOf('week').toDate()
	  }];
	
	  return _bluebird2.default.mapSeries(ranges, function (range) {
	    return knex.select(knex.raw('count(*) as count')).from(function () {
	      return this.from('analytics_interactions').where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('ts', range.start, range.end)).andWhere('direction', '=', 'in').groupBy('user').select(knex.raw(1)).as('q1');
	    }).then().get(0).then(function (result) {
	      return { label: range.label, count: result.count };
	    });
	  }).then(function (results) {
	    return results.reduce(function (acc, curr) {
	      acc[curr.label] = curr.count;
	      return acc;
	    }, {});
	  });
	}
	
	function usersRetention() {
	  // Get the last 7 days cohort of users along with the retention rate
	
	  var cohorts = _lodash2.default.times(8, function (n) {
	    return Number(8 - n);
	  });
	  cohorts = cohorts.map(function (n) {
	    var day = (0, _moment2.default)().subtract(n, 'days');
	    return {
	      start: day.startOf('day').toDate(),
	      end: day.endOf('day').toDate(),
	      name: day.format('MMM Do'),
	      date: day
	    };
	  });
	
	  var result = {};
	
	  // For each days of the cohort
	  return _bluebird2.default.mapSeries(cohorts, function (coo) {
	    // Compute the cohort size [i.e. how many new users on this day?]
	    return knex('users').where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('created_on', coo.start, coo.end)).select(knex.raw('count(*) as cohort_size')).then().get(0).then(function (_ref3) {
	      var cohort_size = _ref3.cohort_size;
	
	      cohort_size = parseFloat(cohort_size);
	
	      // Compute the next 7 days of the cohort
	      // and check how many users [from this cohort] spoke on or before this date
	      // A user is considered as retentioned if he interacted with the bot any day after he onboarded
	
	      var daysToAdd = _lodash2.default.times(7, function (n) {
	        return n;
	      }); // from 0 to 6
	      return _bluebird2.default.mapSeries(daysToAdd, function (dta) {
	        var since = (0, _moment2.default)(coo.start).add(dta, 'days').endOf('day').toDate(); // +x days
	
	        return knex.from(function () {
	          this.from('analytics_interactions').join('users', 'analytics_interactions.user', 'users.id')
	          // where he is a member a this cohort
	          .where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('created_on', coo.start, coo.end))
	          // and where he interacted with the bot since onboard+X days
	          .andWhere((0, _botpress.DatabaseHelpers)(knex).date.isAfter('ts', since))
	          // and where the user spoke, not the bot
	          .andWhere('direction', '=', 'in').groupBy('users')
	          // returns the number of interactions per user
	          .select(knex.raw('count(*) as interaction_count')).as('q1');
	        }).select(knex.raw('count(*) as partial_retention')) // return the total number of users
	        .then().get(0).then(function (_ref4) {
	          var partial_retention = _ref4.partial_retention;
	
	          partial_retention = parseFloat(partial_retention);
	
	          // if the date is out of the cohort sample
	          if ((0, _moment2.default)(since).startOf('day').isSameOrAfter((0, _moment2.default)().startOf('day'))) {
	            return null;
	          }
	
	          return partial_retention / cohort_size || 0;
	        });
	      }).then(function (retention) {
	        var mean = _lodash2.default.mean(_lodash2.default.filter(retention, function (v) {
	          return v !== null;
	        }));
	        result[coo.name] = [cohort_size].concat(_toConsumableArray(retention), [mean]);
	      });
	    });
	  }).then(function () {
	    return result;
	  });
	}
	
	function getBusyHours() {
	  var ranges = getLastDaysRange(7);
	  var result = {};
	
	  return _bluebird2.default.mapSeries(ranges, function (range) {
	    // select count(*) as count, ts from interactions
	    // group by strftime('%H', ts/1000, 'unixepoch')
	    return knex('analytics_interactions').where((0, _botpress.DatabaseHelpers)(knex).date.isBetween('ts', range.start, range.end)).select(knex.raw('count(*) as count, ' + (0, _botpress.DatabaseHelpers)(knex).date.hourOfDay('ts').sql + ' as ts')).groupBy((0, _botpress.DatabaseHelpers)(knex).date.hourOfDay('ts')).then(function (rows) {
	      var row = [];
	      _lodash2.default.times(24, function () {
	        return row.push(0);
	      });
	      var biggest = rows.reduce(function (acc, curr) {
	        return acc = curr.count > acc ? curr.count : acc;
	      }, 0);
	      rows.map(function (x) {
	        row[parseInt(x.ts)] = Math.min(Number((x.count / biggest).toFixed(2)), 0.75);
	      });
	
	      result[range.date] = row;
	    });
	  }).then(function () {
	    return result;
	  });
	}
	
	function getLastRun() {
	  return knex('analytics_runs').orderBy('ts', 'desc').limit(1).then().get(0).then(function (entry) {
	    return entry && (0, _moment2.default)(entry.ts);
	  });
	}
	
	function setLastRun() {
	  return knex('analytics_runs').insert({ ts: (0, _botpress.DatabaseHelpers)(knex).date.now() }).then(true);
	}
	
	module.exports = function (k) {
	  knex = k;
	  return {
	    getTotalUsers: getTotalUsers,
	    getDailyActiveUsers: getDailyActiveUsers,
	    getDailyGender: getDailyGender,
	    getInteractionRanges: getInteractionRanges,
	    getAverageInteractions: getAverageInteractions,
	    getNumberOfUsers: getNumberOfUsers,
	    usersRetention: usersRetention,
	    getBusyHours: getBusyHours,
	    getLastRun: getLastRun,
	    setLastRun: setLastRun
	  };
	};

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = require("bluebird");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("botpress");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _moment = __webpack_require__(8);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _lodash = __webpack_require__(7);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _bluebird = __webpack_require__(10);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	module.exports = function (_ref) {
	  var update = function () {
	    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(name, operation, value) {
	      var racing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	      var knex, today, result;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (_lodash2.default.isString(name)) {
	                _context.next = 2;
	                break;
	              }
	
	              throw new Error('Invalid name, expected a string');
	
	            case 2:
	              _context.next = 4;
	              return bp.db.get();
	
	            case 4:
	              knex = _context.sent;
	              today = (0, _moment2.default)().format('YYYY-MM-DD');
	
	              name = name.toLowerCase().trim();
	
	              if (!name.includes('~')) {
	                name += '~';
	              }
	
	              _context.next = 10;
	              return knex('analytics_custom').where('date', today).andWhere('name', name).update('count', operation).then();
	
	            case 10:
	              result = _context.sent;
	
	              if (!(result == 0 && !racing)) {
	                _context.next = 14;
	                break;
	              }
	
	              _context.next = 14;
	              return knex('analytics_custom').insert({
	                name: name,
	                date: today,
	                count: value
	              }).catch(function (err) {
	                return update(name, operation, value, true);
	              });
	
	            case 14:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));
	
	    return function update(_x, _x2, _x3) {
	      return _ref2.apply(this, arguments);
	    };
	  }();
	
	  var increment = function () {
	    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(name) {
	      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      var countQuery, knex;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (_lodash2.default.isNumber(count)) {
	                _context2.next = 2;
	                break;
	              }
	
	              throw new Error('Invalid count increment, expected a valid number');
	
	            case 2:
	              countQuery = count < 0 ? 'count - ' + Math.abs(count) : 'count + ' + Math.abs(count);
	              _context2.next = 5;
	              return bp.db.get();
	
	            case 5:
	              knex = _context2.sent;
	              return _context2.abrupt('return', update(name, knex.raw(countQuery), count));
	
	            case 7:
	            case 'end':
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));
	
	    return function increment(_x5) {
	      return _ref3.apply(this, arguments);
	    };
	  }();
	
	  var decrement = function () {
	    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(name) {
	      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              return _context3.abrupt('return', increment(name, count * -1));
	
	            case 1:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));
	
	    return function decrement(_x7) {
	      return _ref4.apply(this, arguments);
	    };
	  }();
	
	  var set = function () {
	    var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(name) {
	      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	      return regeneratorRuntime.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              return _context4.abrupt('return', update(name, count, count));
	
	            case 1:
	            case 'end':
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    }));
	
	    return function set(_x9) {
	      return _ref5.apply(this, arguments);
	    };
	  }();
	
	  //{ name, type, description, variables }
	
	
	  var getAll = function () {
	    var _ref9 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(from, to) {
	      return regeneratorRuntime.wrap(function _callee8$(_context8) {
	        while (1) {
	          switch (_context8.prev = _context8.next) {
	            case 0:
	              return _context8.abrupt('return', _bluebird2.default.map(graphs, function (graph) {
	                return getters[graph.type](graph, from, to);
	              }));
	
	            case 1:
	            case 'end':
	              return _context8.stop();
	          }
	        }
	      }, _callee8, this);
	    }));
	
	    return function getAll(_x20, _x21) {
	      return _ref9.apply(this, arguments);
	    };
	  }();
	
	  var bp = _ref.bp;
	
	  var graphs = [];
	
	  function addGraph(graph) {
	    if (!_lodash2.default.includes(['count', 'percent', 'piechart'], graph.type)) {
	      throw new Error('Unknown graph of type ' + graph.type);
	    }
	
	    graphs.push(graph);
	  }
	
	  var getters = {
	    count: function () {
	      var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(graph, from, to) {
	        var knex, variable, rows;
	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return bp.db.get();
	
	              case 2:
	                knex = _context5.sent;
	                variable = _lodash2.default.first(graph.variables);
	                _context5.next = 6;
	                return knex('analytics_custom').select(['date', knex.raw('sum(count) as count')]).where('date', '>=', from).andWhere('date', '<=', to).andWhere('name', 'LIKE', variable + '~%').groupBy('date').then(function (rows) {
	                  return rows.map(function (row) {
	                    return Object.assign(row, { count: parseInt(row.count) });
	                  });
	                });
	
	              case 6:
	                rows = _context5.sent;
	                return _context5.abrupt('return', Object.assign({}, graph, { results: rows }));
	
	              case 8:
	              case 'end':
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));
	
	      function count(_x11, _x12, _x13) {
	        return _ref6.apply(this, arguments);
	      }
	
	      return count;
	    }(),
	
	    percent: function () {
	      var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(graph, from, to) {
	        var variable1, variable2, count1, count2, allDates, rows;
	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                variable1 = _lodash2.default.first(graph.variables);
	                variable2 = _lodash2.default.last(graph.variables);
	                _context6.next = 4;
	                return getters.count({ variables: [variable1] }, from, to);
	
	              case 4:
	                count1 = _context6.sent;
	                _context6.next = 7;
	                return getters.count({ variables: [variable2] }, from, to);
	
	              case 7:
	                count2 = _context6.sent;
	                allDates = _lodash2.default.uniq([].concat(_toConsumableArray(_lodash2.default.map(count1.results, 'date')), _toConsumableArray(_lodash2.default.map(count2.results, 'date'))));
	                rows = allDates.map(function (date) {
	                  var n1 = _lodash2.default.find(count1.results, { date: date }) || { count: 0 };
	                  var n2 = _lodash2.default.find(count2.results, { date: date }) || { count: 1 };
	
	                  var percent = n1.count / n2.count;
	
	                  if (_lodash2.default.isFunction(graph.fn)) {
	                    percent = graph.fn(n1.count, n2.count);
	                  }
	
	                  if (percent > 1) {
	                    percent = 1;
	                  }
	
	                  return { date: date, percent: percent };
	                });
	                return _context6.abrupt('return', Object.assign({}, graph, { results: rows }));
	
	              case 11:
	              case 'end':
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));
	
	      function percent(_x14, _x15, _x16) {
	        return _ref7.apply(this, arguments);
	      }
	
	      return percent;
	    }(),
	
	    piechart: function () {
	      var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(graph, from, to) {
	        var knex, variable, rows;
	        return regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                _context7.next = 2;
	                return bp.db.get();
	
	              case 2:
	                knex = _context7.sent;
	                variable = _lodash2.default.first(graph.variables);
	                _context7.next = 6;
	                return knex('analytics_custom').select(['name', knex.raw('sum(count) as count')]).where('date', '>=', from).andWhere('date', '<=', to).andWhere('name', 'LIKE', variable + '~%').groupBy('name').then(function (rows) {
	                  return rows.map(function (row) {
	                    var name = _lodash2.default.drop(row.name.split('~')).join('~');
	
	                    return Object.assign(row, {
	                      name: _lodash2.default.isEmpty(name) ? 'unknown' : name,
	                      count: parseInt(row.count)
	                    });
	                  });
	                });
	
	              case 6:
	                rows = _context7.sent;
	                return _context7.abrupt('return', Object.assign({}, graph, { results: rows }));
	
	              case 8:
	              case 'end':
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));
	
	      function piechart(_x17, _x18, _x19) {
	        return _ref8.apply(this, arguments);
	      }
	
	      return piechart;
	    }()
	  };
	
	  return { increment: increment, decrement: decrement, set: set, addGraph: addGraph, getAll: getAll };
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _bluebird = __webpack_require__(10);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	var _moment = __webpack_require__(8);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _botpress = __webpack_require__(11);
	
	var _lodash = __webpack_require__(7);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var knex = null;
	var bp = null;
	
	function initializeDb() {
	  if (!knex) {
	    throw new Error('you must initialize the database before');
	  }
	
	  return (0, _botpress.DatabaseHelpers)(knex).createTableIfNotExists('analytics_interactions', function (table) {
	    table.increments('id').primary();
	    table.timestamp('ts');
	    table.string('type');
	    table.string('text');
	    table.string('user').references('users.id');
	    table.enu('direction', ['in', 'out']);
	  }).then(function () {
	    return (0, _botpress.DatabaseHelpers)(knex).createTableIfNotExists('analytics_runs', function (table) {
	      table.increments('id').primary();
	      table.timestamp('ts');
	    });
	  }).then(function () {
	    return (0, _botpress.DatabaseHelpers)(knex).createTableIfNotExists('analytics_custom', function (table) {
	      table.string('date');
	      table.string('name');
	      table.integer('count');
	      table.unique(['date', 'name']);
	    });
	  }).then(function () {
	    return knex;
	  });
	}
	
	function saveInteractionIn(event) {
	
	  var user = _lodash2.default.get(event, 'user.id') || _lodash2.default.get(event, 'user.userId') || _lodash2.default.get(event, 'raw.from') || _lodash2.default.get(event, 'user');
	
	  if (!user.startsWith(event.platform)) {
	    user = event.platform + ':' + user;
	  }
	
	  var interactionRow = {
	    ts: (0, _botpress.DatabaseHelpers)(knex).date.now(),
	    type: event.type,
	    text: event.text,
	    user: user,
	    direction: 'in'
	  };
	
	  return knex('analytics_interactions').insert(interactionRow);
	}
	
	function saveInteractionOut(event) {
	
	  var userId = _lodash2.default.get(event, 'user.id') || _lodash2.default.get(event, 'user.userId') || _lodash2.default.get(event, 'raw.to') || _lodash2.default.get(event, 'user');
	
	  if (!userId.startsWith(event.platform)) {
	    userId = event.platform + ':' + userId;
	  }
	
	  var interactionRow = {
	    ts: (0, _botpress.DatabaseHelpers)(knex).date.now(),
	    type: event.type,
	    text: event.text,
	    user: userId,
	    direction: 'out'
	  };
	
	  return knex('analytics_interactions').insert(interactionRow).then(function (result) {
	    return true;
	  });
	}
	
	module.exports = function (k, botpress) {
	  knex = k;
	  bp = botpress;
	
	  return {
	    initializeDb: initializeDb,
	    saveIncoming: saveInteractionIn,
	    saveOutgoing: saveInteractionOut
	  };
	};

/***/ }
/******/ ]);
//# sourceMappingURL=node.bundle.js.map